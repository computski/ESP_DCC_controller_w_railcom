With service mode the same JSON string to write is used to come back to the UI in the event of read.


With POM we can do similar but i want to stop messing about with alpha-text cv values and use JSON properly
/*state for Program on Main*/
enum POMstate {
	POM_BYTE,
	POM_BYTE_WRITE,
	POM_BIT,
	POM_BIT_WRITE,
	POM_BYTE_READ
};

struct POM {
	uint16_t addr = 3;
	bool    useLongAddr;
	bool	useAccessoryAddr;  //added 2020-06-17
bool bitManipulation;   //added 2024-11-11
	uint16_t cvReg = 29;
	uint8_t  cvData = 128;
	uint8_t	 cvBit = 0; //<7> is the bit value, <0-2> the bit pos
	uint8_t digitPos;
	uint8_t	state = POM_BYTE;
	uint8_t timeout = 0;
	uint8_t packetCount;
} static m_pom;


	//pom = { "type": "dccUI", "cmd": "pom", "action": "byte", "addr":"S3", "cvReg": 0, "cvVal": "B23" };
					
actions toward controller are
"byteW"
"byteR"
"bitW"
"bitR"

actions toward user are these, i.e. they are return values
"byte"
"bit"
"ok" the outward command was received and acted on.  data might be coming back to you...  "ok" will display a Command Sent message for 2 sec.
I don't think I will do this for reads, because a second return message with the read value needs to comeback almost immediately, or a ??? after 0.5s

cvReg will always be numeric

cvVal will be either an integer for byte values, or a bit-packed integer for bit values where <7> is the bit value and <2-0> the bit posn
or in the event of a failed read, it will be ???

Note: writing to railcom decoders (my ESU) will cause them to emit the same CV back as confirmation.  The ESU does not generate ACK in this situation.
I don't see much benefit in looking for positive confirmation the write was successful, as this is not possible with non RC decoders and it generally works reliably.
If you really want to know if the byte stuck, you can perform an immediate read.
[note if we cannot get bit verify to work, we can always request a byte read and then bit-check this]


bool writePOMcommand(const char *addr, uint16_t cv, const char *val);
will set bitManipulation and read/write based on additional char attrib for the action.
it then sets the m_pom.state   in fact a bitManipulation flag is not required.


But, the routine that reads RC data does not know what it has received, i.e. it could be a bit map or a cvValue
In some respects we don't care, we just received a byte so send that back over to the user.  And in fact if we always just read a byte then we know that
is what we receive and we can then do bit testing on it as required.  it's no faster/slower because the DCC commands and response datagrams are the same length.
		