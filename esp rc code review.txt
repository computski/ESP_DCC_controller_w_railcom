browser initiates with websocket call

this goes to void nsDCCweb::DCCwebWS(JsonDocument doc)
specifically if (strcmp(cmd, "pom") == 0)

this in turn calls writePOMcommand(doc["addr"], doc["cvReg"], doc["cvVal"], doc["action"]);

in DCCcore::bool writePOMcommand(const char *addr, uint16_t cv, const char *val, const char *action)
this routine will initialise m_pom struct with the desired Reg and Val, then intiate a m_pom.state
such as m_pom.state = POM_BYTE_READ;

and then the dcc state engine is initated into pom mode  dccSE = DCC_POM;  


dccSE runs as part of the program loop.
DCC_POM will then work its way through the m_pom state engine.



case DCC_POM:
	m_pom.packetCount -= m_pom.packetCount > 0 ? 1 : 0;
	if (m_pom.packetCount != 0) {break; }    <<<<<<<<<<<<<<<< maybe this is the problem.  NO it is not, typically this is not greater than 4
so it will invariably be zero when you come to read a second cvReg.


within the routine
case POM_BYTE_READ: 
  queues up the DCC packet.  this will be retransmitted 4 times. 
	the routine immediately calls readRailcom.    

nsRailcom::readRailcom(m_pom.addr,m_pom.useLongAddr, m_pom.cvReg);

this is async, in principle the 4 packets will take about 8mS per packet but readRailcom starts listening immediately.
I think it unlikely in the case of read, that the read-out bytes over railcom are still pending at the point a new read request goes in.

readRailcom initiatises the data receptor.
 it inits rc_msg  which is a static struct, local to Railcom.cpp  [maybe THIS is the issue, that the struct is declared static and so
possibly it persists and its values persist]
struct RC_MSG {...
	}static rc_msg;


note on statics in a header:
static means that the variable is only used within your compilation unit and will not be exposed to the linker, 
so if you have a static int in a header file and include it from two separate .c files, 
you will have two discrete copies of that int, which is most likely not at all what you want.


SO >>>> declare static RC_MSG rc_msg; in the c file only
it might be the case that two copies of rc_msg exist in memory (because we include railcom.h 2 or 3 times)
and that it is reading out the old copy of the var....

I think i will also move decode[] and the other struct into the railcom.cpp file as these do not need to be accessed outside of 
the module scope.

RC_STATE has to be visible outside? no, because start and processing are self contained





REVIEW the other modules
DCCcore.h
we should not declare static m_pom in the header, nor m_cv;
note that the header does correctly declare certain externs.












