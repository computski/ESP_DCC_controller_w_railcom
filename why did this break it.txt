static void IRAM_ATTR dcc_intr_handler(void) {
		//enable/disable power at the start of this routine, because we will change the bit-type next
		//outside of a railcom cutout, power status is as commanded by system
		if (DCCperiod != DCC_CUTOUT) {
			//this will re-enable power at end of a railcom cutout
			gpio->out_w1ts = DCCpacket.trackPower ? enable_mask : enable_maskInverse;
			gpio->out_w1tc = DCCpacket.trackPower ? enable_maskInverse : enable_mask;
		}
		//during a cutout, power is not modified, leaving it OFF as set in railcom



		//set the period based on the bit-type we queued up in the last interrupt
		switch (DCCperiod) {
		case DCC_ZERO_H:
			WRITE_PERI_REG(&timer->frc1_load, ticksZERO);
			gpio->out_w1ts = dcc_mask;  //set bits to logic 1
			gpio->out_w1tc = dcc_maskInverse;  //set bits to logic 0
			dccCount++;
			break;
		case DCC_ZERO_L:
			WRITE_PERI_REG(&timer->frc1_load, ticksZERO);
			gpio->out_w1ts = dcc_maskInverse;  //set bits to logic 1
			gpio->out_w1tc = dcc_mask;  //set bits to logic 0
			dccCount++;
			break;
		case DCC_ONE_H:
			WRITE_PERI_REG(&timer->frc1_load, ticksONE);
			gpio->out_w1ts = dcc_mask;  //set bits to logic 1
			gpio->out_w1tc = dcc_maskInverse;  //set bits to logic 0
			break;
		case DCC_ONE_L:
			WRITE_PERI_REG(&timer->frc1_load, ticksONE);
			gpio->out_w1ts = dcc_maskInverse;  //set bits to logic 1
			gpio->out_w1tc = dcc_mask;  //set bits to logic 0
			break;
			/*debug
		case DCC_CUTOUT_START:
			WRITE_PERI_REG(&timer->frc1_load, ticksCutoutStart);
			//this is a pseudo start to a new bit
			gpio->out_w1ts = dcc_mask;  //set bits to logic 1
			gpio->out_w1tc = dcc_maskInverse;  //set bits to logic 0
			break;
		case DCC_CUTOUT:
			WRITE_PERI_REG(&timer->frc1_load, ticksCutout);
			//assert a railcom cutout.
			//IMPORTANT: on some systems, enable makes the power go open circuit, in which case the cutout needs to be facilitated through the dcc drive pins
			//rather than enable.  If we execute through enable, the dcc outputs remain as they were in the preceeding DCC_ONE_L (as an IDLE preceeds the cutout)
			gpio->out_w1ts = enable_maskInverse;
			gpio->out_w1tc = enable_mask;
			//now assert a pseudo end of a bit (low) ready for power to be re-enabled during cutout end
			gpio->out_w1ts = dcc_maskInverse;  //set bits to logic 1
			gpio->out_w1tc = dcc_mask;  //set bits to logic 0
			break;
		case DCC_CUTOUT_END:
			WRITE_PERI_REG(&timer->frc1_load, ticksCutoutEnd);
			//this is a pseudo end of a bit
			//hold the low state as set in DCC_CUTOUT, power was re-enabled at start of routine
			break;
			*/


		}
		/*the delay gets executed and the block below sets next-state and queues up next databit*/

		timer->frc1_int &= ~FRC1_INT_CLR_MASK;
		//this memory barrier compiler instruction is left in from the code I leveraged
		asm volatile ("" : : : "memory");

		switch (DCCperiod) {
		case DCC_ZERO_H:
			DCCperiod = DCC_ZERO_L;   //queue up second part of the zero bit
			break;
		case DCC_ONE_H:
			DCCperiod = DCC_ONE_L;   //queue up second part of the one bit
			break;
			/*debug
		case DCC_CUTOUT_START:
			DCCperiod = DCC_CUTOUT;
			break;
		case DCC_CUTOUT:
			DCCperiod = DCC_CUTOUT_END;
			break;
		case DCC_CUTOUT_END:
			*/

		default:
			/*if executing the low part of a DCC zero or DCC one, then advance bit sequence and queue up next bit */
			DCCperiod = DCC_ONE_H;  //default


			if (TXbitCount == 9) {
				//during preamble countdown which starts at 32 or 22, we are triggered at 9 and will copy the locked DCCpacket to TXbuffer and set DCCclearToSend
				//memcpy woould be slower than direct assignment

				//Q: 2023-08-30 how does DCCcore know to wait for last packet to transmit?
				//A: it does not.  It waits for CTS, sets a packet and clears CTS itself to prevent overwrites.

				_TXbuffer.data[0] = DCCpacket.data[0];
				_TXbuffer.data[1] = DCCpacket.data[1];
				_TXbuffer.data[2] = DCCpacket.data[2];
				_TXbuffer.data[3] = DCCpacket.data[3];
				_TXbuffer.data[4] = DCCpacket.data[4];
				_TXbuffer.data[5] = DCCpacket.data[5];
				_TXbuffer.packetLen = DCCpacket.packetLen;
				//_TXbuffer.longPreamble = DCCpacket.longPreamble;  //we never read the value of _TXbuffer.longPreamble
				_TXbuffer.doCutout = DCCpacket.doCutout;

				TXbyteCount = 0;
				DCCpacket.clearToSend = true;
			}
			if (TXbitCount <= 8) {
				if (TXbitCount == 8)
				{
					//8 is a start bit, or a preamble
					if (TXbyteCount == _TXbuffer.packetLen)
					{
					//2020-06-08 reached end of a packet, it is now, and prior 
					//to preamble for next packet that we assert a RailCom cutout

						//2023-08-30 at this point assert a railcom cutout
						//we avoid a retrigger because TXbitCount==8 and TXbyteCount =_TXbuffer.packetLen and we have not yet pulled in the new DCCpacket
						//and we cleared _TXbuffer.doCutout when we looped for DCCperiod = DCC_CUTOUT.  So now we will drop into the preamble code and shortly after 
						//that (i.e. a few TXbitCounts) we will pull in the packet into TXbuffer
						if (_TXbuffer.doCutout) {
							//DCCperiod = DCC_CUTOUT_START;  //queue up a cutout period   DEBUG DISABLE
							_TXbuffer.doCutout = false; //no retrigger
						}
						else
						{
							//code block as it was, dealing with preambles
							if (DCCpacket.longPreamble)
								//2023-08-30 Qn did this ever work properly?  The idea is a new packet is inspected for its preamble len and we act on it.
								//TXbyteCount increments. at the point it hits packetLen we are done. BUT we don't know what the preamble for the next packet should be because
								//we haven't loaded it into TXbuffer.... ah but the next queued packet is held in DCCPacket so that is valid and that's why we inspect its longpreamble value
								//because we are about to load it
								//CTS is true throughout packet transmission, it only goes false breifly at the point the preamble has started
								//but with railcom, its going to be stuck false during the entire cutout and in reality this time should be open to buffer writes
							{
								TXbitCount = 32;
							}  //long peamble 24 bits
							else
							{
								TXbitCount = 22;
							}  //Preamble 14 bits

							TXbyteCount = 0;
							//2023-08-30 we have just read the preamble requirements for DCCpacket, i.e. next packet to be transmitted so lock out any changes
							DCCpacket.clearToSend = false;
						}
					
					
					}
					else
					{
						//we are dealing with a zero separator, aka start bit ahead of every byte transmitted
						DCCperiod = DCC_ZERO_H; 
					}
				}
				else
				{
					/*must be 7-0, queue up databit*/
					if ((_TXbuffer.data[TXbyteCount] & (1 << TXbitCount)) == 0)
					{//queue a zero
						DCCperiod = DCC_ZERO_H; //queue up a zero
					}

					/*special case 0, assert bit but set bit count as 9 as it immediatley decrements to 8 on exit*/
					if (TXbitCount == 0) { TXbyteCount++; TXbitCount = 9; }
				}
			}
			//2023-08-30 only decrement if we are not in a DCC_CUTOUT
			TXbitCount -= DCCperiod == DCC_CUTOUT ? 0 : 1;
			
		}
		//one millisecond fast tick flag
		//2023-09-24 we will need to also adjust this for railcom cutout periods
		DCCpacket.fastTickFlag = ((dccCount % ticksMSfast) == 0) ? true : false;

		/*ten millisecond flag.  DCC zeros have twice the period length hence the count is doubled for these
		every 10mS we will enable/disable track power if commanded from the system, this however will mess up the railcom cutout
		so it must be supressed if we are currently sitting in a cutout period*/
		if (++dccCount >= ticksMS) {
			dccCount = 0;
			DCCpacket.msTickFlag = true;
			//enable/disable trackpower if required.   but NOT during a railcom cutout
			
			//2023-09-24 rethink; why enable/disable power in 10mS windows.  surely if the system wants power off, we should act immediately
			//this also means we can tidy the railcom interaction with power.
			/*
			if (DCCperiod != DCC_CUTOUT) {
				gpio->out_w1ts = DCCpacket.trackPower ? enable_mask : enable_maskInverse;
				gpio->out_w1tc = DCCpacket.trackPower ? enable_maskInverse : enable_mask;
			}
			*/
		}
		
		

	}